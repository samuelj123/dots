# ~/.bashrc: executed by bash(1) for non-login shells.
# {{{1 History Stuff
HISTCONTROL=ignoreboth # ignore dumb entries in the history.
shopt -s histappend # append to the history file, don't overwrite it
HISTSIZE=1000
HISTFILESIZE=2000
shopt -s checkwinsize # check for window Resize  after each command

shopt -s globstar # The pattern "**" used in a pathname expansion context will match all files, directories and subdirectories.

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"


# {{{1 Prompt
# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color,)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	color_prompt=yes
    else
	color_prompt=no
    fi
fi

# if [ "$color_prompt" = yes ]; then
	function __set_my_prompt
	    {
	       local RED="\033[0;91m"
	       local GREEN="\033[0;92m"
	       local NOCOLOR="\033[0m"
	       local YELLOW="\033[0;93m"
	       local BLACK="\033[0;90m"
	       local PURPLE="\033[0;34m"
	     
	       local git_modified_color="\[${GREEN}\]"
	       local git_status=$(git status 2>/dev/null | grep "Your branch is ahead" 2>/dev/null)
	       if [ "$git_status" != "" ]
	       then
		   git_modified_color="\[${YELLOW}\]"
	       fi
	       local git_status=$(git status --porcelain 2>/dev/null)
	       if [ "$git_status" != "" ]
	       then
		   git_modified_color="\[${RED}\]"
	       fi
	     
	       local git_branch=$(git branch --show-current 2>/dev/null)
	       if [ "$git_branch" != "" ];
	       then
		  git_branch="$git_modified_color "
	       PS1="\[${PURPLE}\]\w $git_branch\[${NOCOLOR}\] "
	   else 
	       PS1="\[${PURPLE}\]\w \[${NOCOLOR}\] "

	       fi
	    }
 
PROMPT_COMMAND='__set_my_prompt'
    # PS1='${debian_chroot:+($debian_chroot)}\[\033[01;36m\]\W\a\[\033[01;36m\] \[\033[00m\] '
# else
    #PS1='${debian_chroot:+($debian_chroot)}\u:\W\$ '
    # PS1='${debian_chroot:+($debian_chroot)}\u:\W> '
# fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case '$TERM' in
    xterm*|rxvt*)
	 PS1='\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \W\a\]$PS1'
	# PS1='${debian_chroot:+($debian_chroot)}\[\033[01;36m\]\W\a\[\033[01;36m\] \[\033[00m\] '
	;;
    *)
	;;
esac


# colored GCC warnings and errors
export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'



# {{{1 Alias definitions.
if [ -f ~/dotfiles/bash/aliases ]; then
    . ~/dotfiles/bash/aliases
fi
# {{{2 Alert alias
# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'
#
# {{{2 Color Support Aliases
# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    alias dir='dir --color=auto'
    alias vdir='vdir --color=auto'
    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi
# {{{1 Programmable completion features 
if ! shopt -oq posix; then
    if [ -f /usr/share/bash-completion/bash_completion ]; then
	. /usr/share/bash-completion/bash_completion
    elif [ -f /etc/bash_completion ]; then
	. /etc/bash_completion
    fi
fi

# {{{1 FZF Stuff
# export FZF_DEFAULT_COMMAND='find .--hidden --exclude ".git"'
# export FZF_ALT_C_COMMAND:"find -d --hidden --exclude '.git'"
# export FZF_ALT_C_OPTS: " --preview 'tree -C {}'"
# 
# {{{1 Echo Stuff
echo -e "\e[90m$USER on $(hostname)\e[0m"
